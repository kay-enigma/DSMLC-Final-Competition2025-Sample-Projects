import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# File paths to the datasets
billing_path = "billing_cleaned.xlsx"  # Replace with the correct file path
employees_path = "employees_cleaned.xlsx"  # Replace with the correct file path

# Step 1: Load the datasets
billing = pd.read_excel(billing_path)
employees = pd.read_excel(employees_path)

# Step 2: Merge 'rate' column from employees into billing
billing = pd.merge(billing, employees[['employee_id', 'rate']], on='employee_id', how='left')

# Step 3: Handle missing values
billing['rate'] = billing['rate'].fillna(billing['rate'].mean())  # Replace missing rates with the mean
billing['revenue'] = billing['hours'] * billing['rate']  # Calculate revenue

# Step 4: Prepare features and target
X = billing[['rate', 'hours']]  # Features: employee rate and hours worked
y = billing['revenue']  # Target: total revenue generated by each employee

# Step 5: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 6: Train the regression model
model = RandomForestRegressor(random_state=42)
model.fit(X_train, y_train)

# Step 7: Make predictions
y_pred = model.predict(X_test)

# Step 8: Evaluate the model
print("\nRegression Evaluation:")
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (RÂ²):", r2_score(y_test, y_pred))

# Step 9: Cross-validation for reliability
cv_scores = cross_val_score(model, X, y, cv=5, scoring='r2')
print("\nCross-validated R-squared scores:", cv_scores)
print("Mean Cross-validated R-squared score:", cv_scores.mean())

# Step 10: Feature Importance Visualization
feature_importances = model.feature_importances_
plt.figure(figsize=(6, 4))
plt.bar(X.columns, feature_importances, color='skyblue')
plt.xlabel('Features')
plt.ylabel('Importance')
plt.title('Feature Importance in Revenue Prediction')
plt.show()